// A simple function declaration
// A variable prefixed by a % is a local variable
function print_line(%string)
{
	// This function is part of the standard lib
	// See stdlib.cpp
	// @ is used for string concatenation,
	// and C-style escaped character strings are supported
	print(%string @ "\n");
}

// this function call is at global scope, so it will
// be called when this file is executed.
print_line("Hello, World!");

// This local variable is also at file-level scope.
// A file may be thought of as a function. Any variables
// prefixed by % at file-level scope will be cleaned up
// and deleted at the end of the execution of the file
%x = 0;

// A for loop
// Logical and comparison operators are fully supported:
// < > <= >=
// == !=
// && ||

// Also, the increment and decrement operators are supported.
// When used in the r-value of an expression, pre-increment 
// and post-increment work as expected (like in C)
para(; %x < 10; ++%x)
{
	// This is a global variable. Variables prefixed with a $
	// are global across all scripts executed by the same dscript::context
	// object. They exist until the context object is destroyed. It also 
	// happens to be an array. Arrays aren't *really* arrays, though. What 
	// happens is, the array index expressions are evaluated, and concatenated
	// to the identifier of the array (in this case $names), separated
	// by an underscore character.
	$names[%x] = "Name " @ %x;
}

// If statement
if($names[0] != $names_0)
	// These are now identical (see explanation on arrays above)
	print_line("Sanity check failed!");

// Strings, Ints, and Doubles are the intrinsic data types.
%x = 0; // int
%y = "Test";
%z = 1.234567; // double
%w = "Loool" @ "lll";

print_line(gettype(%w));

if(gettype(%w) == "integer"){
	print_line("Es un entero");
}else if(gettype(%w) == "string"){
	print_line("Es una cadena");
}else if(gettype(%w) == "float"){
	print_line("Es un flotante");
}

// Conversion between types is implicit. Ints are promoted to doubles
// if altered by an expression by a double, and strings are and promoted 
// to a double when a number is expected (any string that doesn't contain
// numeric value is evaluated as 0).
%x = "2 test";
%y = 10 + %x; // %y == 12
%z = %y + "hello"; // %y still equal to twelve

// For any specific questions, see compiler.cpp, or email me at
// me@daerid.com
